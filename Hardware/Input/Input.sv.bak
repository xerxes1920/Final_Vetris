module Input(
    clk,
    rst,
    KEY,
    GPIO,
    updateInpReg,
    sprOut,
    sprIn
);
	input clk;
	input rst;
	input [3:0] KEY;
	input [31:0] sprIn;
	inout [35:0] GPIO;
	input updateInpReg;
	logic output [31:0] sprOut;

	logic [31:0] timeVal;
    logic [31:0] inputReg;
	logic [7:0] databus;
	logic [1:0] ioaddr;
	logic rda;
	logic rstTimer;
	
	logic [7:0] rcv_data, databus_out, div_out;
	
	parameter SET_LBR = 4'h0, SET_HBR = 4'h1, RX_DATA = 4'h2;
	
	logic moveDown;
	logic [3:0] state;
	logic [3:0] nxt_state;
	
	logic drive_out;
	logic set_data;
	logic rxd;

	assign rxd = GPIO[5];

	Timer downTimer(
		.clk(clk),
		.rst(rst),
		.timeVal(timeVal),
		.rstTimer(rstTimer),
		.moveDown(moveDown)
	);
	
	spart spart0( 
		.clk(clk),
        .rst(rst),
        .rda(rda),
        .ioaddr(ioaddr),
        .databus(databus),
        .rxd(rxd)
	);

	always_ff @(posedge clk or negedge rst) begin
			if(updateInpReg == 1'b1) 
				inputReg[31:0] <= sprIn[31:0];
			else
				inputReg[31:0] <= inputReg[31:0];
	end
	
	always_ff @(posedge clk or negedge rst) begin
			if(databus == "a")
					inputReg[1] <= 1'b1;
			else if(databus == "s")
					inputReg[0] <= 1'b1;
			else if(databus == "d")
					inputReg[2] <= 1'b1;
			if(!rst)
					timeVal <= 32'd25_000_000;
	end

	logic right1, left1, down1, left, right, down;
	always_ff @(posedge clk or negedge rst) begin
			right1 <= KEY[0];
			right <= right1;
			inputReg[2] <= right & right1;

			if(moveDown != 1'b1) begin
					down1 <= KEY[1];
					down <= down1;
					inputReg[1] <= down & down1;
			end
			else
					inputReg[1] <= 1'b1;

			left1 <= KEY[2];
			left <= left1;
			inputReg[2] <= left & left1;

	end
	assign rstTimer = inputReg[1];
    
	
	always @ (posedge clk or negedge rst) begin
		if(rst)
			state = SET_LBR;
		else
			state = nxt_state;
	end
	
	always @ (posedge clk) begin
		if(set_data)
			databus_out <= rcv_data;
	end
	
	
	always @ (*) begin
		nxt_state = state;
		set_data = 1'b0;
		case(state)
			SET_LBR: begin
				ioaddr = 2'b10;
				drive_out = 1'b1;
                div_out = 8'h8A;
                nxt_state = SET_HBR;
				// else if(br_cfg == 2'b01) begin
				// 	div_out = 8'h45;
				// 	nxt_state = SET_HBR;
				// end
				// else if(br_cfg == 2'b10) begin
				// 	div_out = 8'hA2;
				// 	nxt_state = SET_HBR;
				// end
				// else if(br_cfg == 2'b11) begin
				// 	div_out = 8'h45;
				// 	nxt_state = SET_HBR;
				// end
			end
			SET_HBR: begin
				ioaddr = 2'b11;
				drive_out = 1'b1;
                div_out = 8'h02;
				// else if(br_cfg == 2'b01) begin
				// 	div_out = 8'h01;
				// end
				// else if(br_cfg == 2'b10) begin
				// 	div_out = 8'h00;
				// end
				// else if(br_cfg == 2'b11) begin
				// 	div_out = 8'h01;
				// end
				nxt_state = RX_DATA;
			end
			RX_DATA: begin
				ioaddr = 2'b00;
				rcv_data = databus;
				drive_out = 1'b0;
				//if(rda == 1'b1) begin
					//nxt_state = TX_DATA;
				//end
				//else begin
				nxt_state = state;
				//end
			end
		endcase
	end
	
	assign databus = (drive_out) ? ((ioaddr[1] == 1'b1) ? div_out : databus_out ): 8'bz;
	assign sprOut = inputReg;
	
endmodule
